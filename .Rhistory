# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
# Get your balance in coins
equity <- get_balance(url = "https://api.kraken.com/0/private/Balance",
key = API_Key,
secret = API_Sign)
eq <- data.frame(balance = unlist(equity$result))
eq$coin <- rownames(eq)
rownames(eq) <- NULL
# remove currencies
currency <- c("ZEUR", "CHF", "USDT")
eq <- eq[!eq$coin %in% currency, ]
eq$pair <- NA
eq$last_price <- NA
eq$date_time <- NA
# Match coins to euro pairs to get equity
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
avail_pairs <- names(avail_pairs$result)
# Get the official ticker
for(i in 1:nrow(eq)){
eq$pair[i] <- grep("EUR", grep(eq$coin[i], avail_pairs, value = T), value = T)[1]
}
# Get last trade price for each ticker
for (i in 1:length(eq$pair)){
url <- paste0('https://api.kraken.com/0/public/Ticker?pair=', eq$pair[i])
dat <- jsonlite::fromJSON(url)
eq$last_price[i] <- unlist(dat$result)[7]
eq$date_time <- Sys.time()
Sys.sleep(3)
print(i)
}
# Extract as a csv
write.table(eq, file = paste0(path, "equity_report.csv"), append = T,
row.names = F, sep = ",")
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
eq <- read.csv(list.files(path, full.names = T))
eq <- eq[eq$balance != "balance", ]
eq$balance <- as.numeric(eq$balance)
eq$last_price <- as.numeric(eq$last_price)
eq$date_time <- as.POSIXct(eq$date_time)
# eq$date_time <- as.Date(eq$date_time, format ="%y-%m-%d")
pairs <- unique(eq$pair)
eq$equity <- eq$balance * eq$last_price
eq <- subset(eq, eq$equity >= 1)
eq$equity <- round(eq$equity, 1)
# eq_1 <- subset(eq, eq$pair == pairs[1])
# eq_1$equity <- eq_1$balance * eq_1$last_price
ggplot(data = eq, aes(x = date_time, y = equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed") +
facet_wrap(~coin, scales = "free_y") +
# scale_y_continuous(breaks=unique(eq$equity)) +
theme_light()
# Overall
eq <- as.data.table(eq)
eq_overall<- eq[, sum(equity), by = date_time]
colnames(eq_overall)[2] <- "total_equity"
ggplot(data = eq_overall, aes(x = date_time, y = total_equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed")+
# scale_y_continuous(breaks=unique(eq_overall$total_equity)) +
ggtitle("Total equity in Euros") +
xlab("Date") + ylab("Euros")+
theme_light()
# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
# Get your balance in coins
equity <- get_balance(url = "https://api.kraken.com/0/private/Balance",
key = API_Key,
secret = API_Sign)
eq <- data.frame(balance = unlist(equity$result))
eq$coin <- rownames(eq)
rownames(eq) <- NULL
# remove currencies
currency <- c("ZEUR", "CHF", "USDT")
eq <- eq[!eq$coin %in% currency, ]
eq$pair <- NA
eq$last_price <- NA
eq$date_time <- NA
# Match coins to euro pairs to get equity
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
avail_pairs <- names(avail_pairs$result)
# Get the official ticker
for(i in 1:nrow(eq)){
eq$pair[i] <- grep("EUR", grep(eq$coin[i], avail_pairs, value = T), value = T)[1]
}
# Get last trade price for each ticker
for (i in 1:length(eq$pair)){
url <- paste0('https://api.kraken.com/0/public/Ticker?pair=', eq$pair[i])
dat <- jsonlite::fromJSON(url)
eq$last_price[i] <- unlist(dat$result)[7]
eq$date_time <- Sys.time()
Sys.sleep(3)
print(i)
}
# Extract as a csv
write.table(eq, file = paste0(path, "equity_report.csv"), append = T,
row.names = F, sep = ",")
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
eq <- read.csv(list.files(path, full.names = T))
eq <- eq[eq$balance != "balance", ]
eq$balance <- as.numeric(eq$balance)
eq$last_price <- as.numeric(eq$last_price)
eq$date_time <- as.POSIXct(eq$date_time)
pairs <- unique(eq$pair)
eq$equity <- eq$balance * eq$last_price
eq <- subset(eq, eq$equity >= 1)
eq$equity <- round(eq$equity, 1)
ggplot(data = eq, aes(x = date_time, y = equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed") +
facet_wrap(~coin, scales = "free_y") +
# scale_y_continuous(breaks=unique(eq$equity)) +
theme_light()
# Overall
eq <- as.data.table(eq)
eq_overall<- eq[, sum(equity), by = date_time]
colnames(eq_overall)[2] <- "total_equity"
ggplot(data = eq_overall, aes(x = date_time, y = total_equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed")+
# scale_y_continuous(breaks=unique(eq_overall$total_equity)) +
ggtitle("Total equity in Euros") +
xlab("Date") + ylab("Euros")+
theme_light()
ggplot(data = eq, aes(x = date_time, y = equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed") +
facet_wrap(~coin, scales = "free_y") +
# scale_y_continuous(breaks=unique(eq$equity)) +
theme_light()
# Overall
eq <- as.data.table(eq)
eq_overall<- eq[, sum(equity), by = date_time]
# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
# Get your balance in coins
equity <- get_balance(url = "https://api.kraken.com/0/private/Balance",
key = API_Key,
secret = API_Sign)
eq <- data.frame(balance = unlist(equity$result))
eq$coin <- rownames(eq)
rownames(eq) <- NULL
# remove currencies
currency <- c("ZEUR", "CHF", "USDT")
eq <- eq[!eq$coin %in% currency, ]
eq$pair <- NA
eq$last_price <- NA
eq$date_time <- NA
# Match coins to euro pairs to get equity
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
avail_pairs <- names(avail_pairs$result)
# Get the official ticker
for(i in 1:nrow(eq)){
eq$pair[i] <- grep("EUR", grep(eq$coin[i], avail_pairs, value = T), value = T)[1]
}
# Get last trade price for each ticker
for (i in 1:length(eq$pair)){
url <- paste0('https://api.kraken.com/0/public/Ticker?pair=', eq$pair[i])
dat <- jsonlite::fromJSON(url)
eq$last_price[i] <- unlist(dat$result)[7]
eq$date_time <- Sys.time()
Sys.sleep(3)
print(i)
}
# Extract as a csv
write.table(eq, file = paste0(path, "equity_report.csv"), append = T,
row.names = F, sep = ",")
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
eq <- read.csv(list.files(path, full.names = T))
eq <- eq[eq$balance != "balance", ]
eq$balance <- as.numeric(eq$balance)
eq$last_price <- as.numeric(eq$last_price)
eq$date_time <- as.POSIXct(eq$date_time)
# eq$date_time <- as.Date(eq$date_time, format ="%y-%m-%d")
pairs <- unique(eq$pair)
eq$equity <- eq$balance * eq$last_price
eq <- subset(eq, eq$equity >= 1)
eq$equity <- round(eq$equity, 1)
# eq_1 <- subset(eq, eq$pair == pairs[1])
# eq_1$equity <- eq_1$balance * eq_1$last_price
ggplot(data = eq, aes(x = date_time, y = equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed") +
facet_wrap(~coin, scales = "free_y") +
# scale_y_continuous(breaks=unique(eq$equity)) +
theme_light()
# Overall
eq <- as.data.table(eq)
eq_overall<- eq[, sum(equity), by = date_time]
colnames(eq_overall)[2] <- "total_equity"
ggplot(data = eq_overall, aes(x = date_time, y = total_equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed")+
# scale_y_continuous(breaks=unique(eq_overall$total_equity)) +
ggtitle("Total equity in Euros") +
xlab("Date") + ylab("Euros")+
theme_light()
# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
# Get your balance in coins
equity <- get_balance(url = "https://api.kraken.com/0/private/Balance",
key = API_Key,
secret = API_Sign)
eq <- data.frame(balance = unlist(equity$result))
eq$coin <- rownames(eq)
rownames(eq) <- NULL
# remove currencies
currency <- c("ZEUR", "CHF", "USDT")
eq <- eq[!eq$coin %in% currency, ]
eq$pair <- NA
eq$last_price <- NA
eq$date_time <- NA
# Match coins to euro pairs to get equity
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
avail_pairs <- names(avail_pairs$result)
# Get the official ticker
for(i in 1:nrow(eq)){
eq$pair[i] <- grep("EUR", grep(eq$coin[i], avail_pairs, value = T), value = T)[1]
}
# Get last trade price for each ticker
for (i in 1:length(eq$pair)){
url <- paste0('https://api.kraken.com/0/public/Ticker?pair=', eq$pair[i])
dat <- jsonlite::fromJSON(url)
eq$last_price[i] <- unlist(dat$result)[7]
eq$date_time <- Sys.time()
Sys.sleep(3)
print(i)
}
# Extract as a csv
write.table(eq, file = paste0(path, "equity_report.csv"), append = T,
row.names = F, sep = ",")
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
eq <- read.csv(list.files(path, full.names = T))
eq <- eq[eq$balance != "balance", ]
eq$balance <- as.numeric(eq$balance)
eq$last_price <- as.numeric(eq$last_price)
eq$date_time <- as.POSIXct(eq$date_time)
# eq$date_time <- as.Date(eq$date_time, format ="%y-%m-%d")
pairs <- unique(eq$pair)
eq$equity <- eq$balance * eq$last_price
eq <- subset(eq, eq$equity >= 1)
eq$equity <- round(eq$equity, 1)
# eq_1 <- subset(eq, eq$pair == pairs[1])
# eq_1$equity <- eq_1$balance * eq_1$last_price
ggplot(data = eq, aes(x = date_time, y = equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed") +
facet_wrap(~coin, scales = "free_y") +
# scale_y_continuous(breaks=unique(eq$equity)) +
theme_light()
# Overall
eq <- as.data.table(eq)
eq_overall<- eq[, sum(equity), by = date_time]
colnames(eq_overall)[2] <- "total_equity"
ggplot(data = eq_overall, aes(x = date_time, y = total_equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed")+
# scale_y_continuous(breaks=unique(eq_overall$total_equity)) +
ggtitle("Total equity in Euros") +
xlab("Date") + ylab("Euros")+
theme_light()
# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
# Get your balance in coins
equity <- get_balance(url = "https://api.kraken.com/0/private/Balance",
key = API_Key,
secret = API_Sign)
eq <- data.frame(balance = unlist(equity$result))
eq$coin <- rownames(eq)
rownames(eq) <- NULL
# remove currencies
currency <- c("ZEUR", "CHF", "USDT")
eq <- eq[!eq$coin %in% currency, ]
eq$pair <- NA
eq$last_price <- NA
eq$date_time <- NA
# Match coins to euro pairs to get equity
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
avail_pairs <- names(avail_pairs$result)
# Get the official ticker
for(i in 1:nrow(eq)){
eq$pair[i] <- grep("EUR", grep(eq$coin[i], avail_pairs, value = T), value = T)[1]
}
# Get last trade price for each ticker
for (i in 1:length(eq$pair)){
url <- paste0('https://api.kraken.com/0/public/Ticker?pair=', eq$pair[i])
dat <- jsonlite::fromJSON(url)
eq$last_price[i] <- unlist(dat$result)[7]
eq$date_time <- Sys.time()
Sys.sleep(3)
print(i)
}
# Extract as a csv
write.table(eq, file = paste0(path, "equity_report.csv"), append = T,
row.names = F, sep = ",")
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
eq <- read.csv(list.files(path, full.names = T))
eq <- eq[eq$balance != "balance", ]
eq$balance <- as.numeric(eq$balance)
eq$last_price <- as.numeric(eq$last_price)
eq$date_time <- as.POSIXct(eq$date_time)
# eq$date_time <- as.Date(eq$date_time, format ="%y-%m-%d")
pairs <- unique(eq$pair)
eq$equity <- eq$balance * eq$last_price
eq <- subset(eq, eq$equity >= 1)
eq$equity <- round(eq$equity, 1)
# eq_1 <- subset(eq, eq$pair == pairs[1])
# eq_1$equity <- eq_1$balance * eq_1$last_price
ggplot(data = eq, aes(x = date_time, y = equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed") +
facet_wrap(~coin, scales = "free_y") +
# scale_y_continuous(breaks=unique(eq$equity)) +
theme_light()
# Overall
eq <- as.data.table(eq)
eq_overall<- eq[, sum(equity), by = date_time]
colnames(eq_overall)[2] <- "total_equity"
ggplot(data = eq_overall, aes(x = date_time, y = total_equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed")+
# scale_y_continuous(breaks=unique(eq_overall$total_equity)) +
ggtitle("Total equity in Euros") +
xlab("Date") + ylab("Euros")+
theme_light()
# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
# Get your balance in coins
equity <- get_balance(url = "https://api.kraken.com/0/private/Balance",
key = API_Key,
secret = API_Sign)
eq <- data.frame(balance = unlist(equity$result))
eq$coin <- rownames(eq)
rownames(eq) <- NULL
# remove currencies
currency <- c("ZEUR", "CHF", "USDT")
eq <- eq[!eq$coin %in% currency, ]
eq$pair <- NA
eq$last_price <- NA
eq$date_time <- NA
# Match coins to euro pairs to get equity
avail_pairs <- myfun("https://api.kraken.com/0/public/AssetPairs", secret = API_Sign, key = API_Key)
avail_pairs <- names(avail_pairs$result)
# Get the official ticker
for(i in 1:nrow(eq)){
eq$pair[i] <- grep("EUR", grep(eq$coin[i], avail_pairs, value = T), value = T)[1]
}
# Get last trade price for each ticker
for (i in 1:length(eq$pair)){
url <- paste0('https://api.kraken.com/0/public/Ticker?pair=', eq$pair[i])
dat <- jsonlite::fromJSON(url)
eq$last_price[i] <- unlist(dat$result)[7]
eq$date_time <- Sys.time()
Sys.sleep(3)
print(i)
}
# Extract as a csv
write.table(eq, file = paste0(path, "equity_report.csv"), append = T,
row.names = F, sep = ",")
# Report path
path <- "/media/chris/DATA/Documents/Bot_Trading/equity_report/"
eq <- read.csv(list.files(path, full.names = T))
eq <- eq[eq$balance != "balance", ]
eq$balance <- as.numeric(eq$balance)
eq$last_price <- as.numeric(eq$last_price)
eq$date_time <- as.POSIXct(eq$date_time)
# eq$date_time <- as.Date(eq$date_time, format ="%y-%m-%d")
pairs <- unique(eq$pair)
eq$equity <- eq$balance * eq$last_price
eq <- subset(eq, eq$equity >= 1)
eq$equity <- round(eq$equity, 1)
# eq_1 <- subset(eq, eq$pair == pairs[1])
# eq_1$equity <- eq_1$balance * eq_1$last_price
ggplot(data = eq, aes(x = date_time, y = equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed") +
facet_wrap(~coin, scales = "free_y") +
# scale_y_continuous(breaks=unique(eq$equity)) +
theme_light()
# Overall
eq <- as.data.table(eq)
eq_overall<- eq[, sum(equity), by = date_time]
colnames(eq_overall)[2] <- "total_equity"
ggplot(data = eq_overall, aes(x = date_time, y = total_equity))+
geom_point(size = 1.5, colour = "black")+
geom_line(alpha = 1, linetype = "dashed")+
# scale_y_continuous(breaks=unique(eq_overall$total_equity)) +
ggtitle("Total equity in Euros") +
xlab("Date") + ylab("Euros")+
theme_light()
# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Params
pair <- "ETHEUR"
interval <- 1
# Get data
OHLC <- simple_OHLC(interval, pair)
OHLC
# Get a first visual with support and reisstance lines
plot_OHLC(dataset = OHLC, roll = 50, n_sort = 3)
# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Params
pair <- "ETHEUR"
interval <- 1
OHLC <- simple_OHLC(interval, pair)
OHLC
OHLC
OHLC
?repeat
??repeat
repeat {
OHLC <- simple_OHLC(interval, pair)
Sys.sleep(10)
print(OHLC)
}
OHLC <- simple_OHLC(interval, pair)
OHLC
OHLC
OHLC <- simple_OHLC(interval, pair)
OHLC
OHLC[, close]
tail(OHLC[, close], 1)
tail(OHLC[, close], 2)
values <- tail(OHLC[, close], 2)
values
(values[2] - values[1]) / values[1]
values[2] - values[1]
(values[1] - values[2]) / values[1]
(values[2] - values[1]) / values[2]
(values[1] - values[2]) / values[1]
(values[1] - values[2]) / values[1] * 100
(values[2] - values[1]) / values[2] * 100
repeat {
OHLC <- simple_OHLC(interval, pair)
values <- tail(OHLC[, close], 2)
(values[2] - values[1]) / values[2] * 100
# print(OHLC)
Sys.sleep(5)
}
repeat {
OHLC <- simple_OHLC(interval, pair)
values <- tail(OHLC[, close], 2)
print((values[2] - values[1]) / values[2] * 100)
# print(OHLC)
Sys.sleep(5)
}
# Initialization
rm(list = ls())
path_source <- "/media/chris/DATA/Documents/Bot_Trading/SmartTrade"
files.sources = grep("API.R", list.files(path_source, full.names = T), value = T)
sapply(files.sources, source)
# Params
pair <- "ETHEUR"
interval <- 60
repeat {
OHLC <- simple_OHLC(interval, pair)
values <- tail(OHLC[, close], 2)
print((values[2] - values[1]) / values[2] * 100)
# print(OHLC)
Sys.sleep(5)
}
OHLC <- simple_OHLC(interval, pair)
repeat {
OHLC <- simple_OHLC(interval, pair)
values <- tail(OHLC[, close], 2)
print((values[2] - values[1]) / values[2] * 100)
# print(OHLC)
Sys.sleep(1)
}
